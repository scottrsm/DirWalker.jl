var documenterSearchIndex = {"docs":
[{"location":"#DirWalker.jl-Documentation","page":"DirWalker.jl Documentation","title":"DirWalker.jl Documentation","text":"","category":"section"},{"location":"","page":"DirWalker.jl Documentation","title":"DirWalker.jl Documentation","text":"CurrentModule = DirWalker","category":"page"},{"location":"#Overview","page":"DirWalker.jl Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"DirWalker.jl Documentation","title":"DirWalker.jl Documentation","text":"This module provides a struct, DirItr, that implements the Iterator Protocol for a directory tree, allowing one to iterate in a linear way over the tree. The DirItr struct has fields that control this iteration in terms of pruning, sorting, and ordering.","category":"page"},{"location":"#Types","page":"DirWalker.jl Documentation","title":"Types","text":"","category":"section"},{"location":"","page":"DirWalker.jl Documentation","title":"DirWalker.jl Documentation","text":"DirItr","category":"page"},{"location":"#DirWalker.DirItr","page":"DirWalker.jl Documentation","title":"DirWalker.DirItr","text":"The structure is a light-weight handle used to linearize a directory tree starting  at the absolute path: path. This linearization is done by implementing the  Base.iterate protocol for this struct.  The other fields determine how the linearization is done.\n\nFields\n\npath     :: String   –  The absolute path to the root directory.\nby_depth :: Bool     – The base name of the logical variables.\ndprune   :: Regex    – The number of variables in the formula.\nfprune   :: Regex    – The bit vector representing the formula. \nordered  :: Bool     – Is the output of directories and functions ordered.\norder_by :: Function – If ordered, function that determines the ordering.i                           This function is used with the sort function's by argument.\n\n\n\n\n\n","category":"type"},{"location":"#Outer-Constructor","page":"DirWalker.jl Documentation","title":"Outer Constructor","text":"","category":"section"},{"location":"","page":"DirWalker.jl Documentation","title":"DirWalker.jl Documentation","text":"DirItr(p::String; by_depth::Bool=true, dprune::AbstractVector{String}=[raw\"^\\.git$\", raw\"\\.github$\"],\n\t\tfprune::AbstractVector{String}=[raw\"^$\"], ordered::Bool=false, order_by::Function=lowercase) ","category":"page"},{"location":"#DirWalker.DirItr-Tuple{String}","page":"DirWalker.jl Documentation","title":"DirWalker.DirItr","text":"DirItr(p::String; <key-word-args>)\n\nOuter constructor for DirItr.\n\nArguments\n\npath :: String  – The full path to the root directory.\n\nKeyword Arguments\n\nby_depth::Bool=true                              – How to traverse the tree: depth-first, or breadth-first.\ndprune=::AbstractVector{String}=[raw\"^\\.git$\"] – A D vector of regular expression strings. This iterator by-passes any git tree.\nfprune=::AbstractVector{String}=[raw\"^$\"]       – A F vector of regular expression strings. This iterator does not filter any files.\nordered::Bool=true                               – If true, order the resulting files and directories.\norder_dir::Symbol=:asc                           – Order direction. One of: :asc (ascending), :desc (descending) .\norder_by::Function=lowercase                     – If ordered is true, order the resulting files and directories with                                                       the sort using order_by as the sorting keyi: sort(...; by=order_by[,...])\n\nReturn\n\n::DirItr\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"DirWalker.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"DirWalker.jl Documentation","title":"DirWalker.jl Documentation","text":"","category":"page"}]
}
